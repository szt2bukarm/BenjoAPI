// Generated by dts-bundle-generator v8.1.2

export interface Thumbnail {
	url: string;
	width: number;
	height: number;
}
export interface TitleRun {
	text: string;
}
export interface Title {
	runs: TitleRun[];
}
export interface AccessibilityData {
	label: string;
}
export interface Accessibility {
	accessibilityData: AccessibilityData;
}
export interface PublishedTimeText {
	simpleText: string;
}
export interface LengthText {
	accessibility: Accessibility;
	simpleText: string;
}
export interface ViewCountText {
	simpleText: string;
}
export interface ShortViewCountText {
	accessibility: Accessibility;
	simpleText: string;
}
export interface VideoRenderer {
	videoId: string;
	thumbnail: {
		thumbnails: Thumbnail[];
	};
	title: Title;
	publishedTimeText: PublishedTimeText;
	lengthText: LengthText;
	viewCountText: ViewCountText | {
		runs: {
			text: string;
		}[];
	};
	shortViewCountText: ShortViewCountText;
}
export interface RichItemRenderer {
	content: {
		videoRenderer: VideoRenderer;
	};
}
export interface RichGridContents {
	richItemRenderer: RichItemRenderer;
}
export interface RichGridRenderer {
	contents: RichGridContents[];
}
export interface TabRenderer {
	content: {
		richGridRenderer: RichGridRenderer;
	};
}
export interface Tabs {
	tabRenderer: TabRenderer;
}
export interface TwoColumnBrowseResultsRenderer {
	tabs: Tabs[];
}
export interface Contents {
	twoColumnBrowseResultsRenderer: TwoColumnBrowseResultsRenderer;
}
export interface YouTubeScriptResponse {
	contents?: Contents;
}
export interface Video {
	videoId?: string;
	title?: string;
	description?: string;
	thumbnails?: Thumbnail[];
	thumbnailUrl?: string;
	length?: string;
	publishedTime?: string;
	viewCount?: number;
}
export interface Stream {
	videoId?: string;
	title?: string;
	description?: string;
	thumbnails?: Thumbnail[];
	thumbnailUrl?: string;
	length?: string;
	publishedTime?: string;
	viewCount?: number;
}
export interface Short {
	videoId?: string;
	thumbnailUrl?: string;
	thumbnails?: Thumbnail[];
	viewCount: string;
}
export interface AllResponse {
	videos: Video[];
	streams: Stream[];
	shorts: Short[];
}
export declare const getVideos: (channelId: string) => Promise<Video[] | {
	message: string;
}>;
export declare const getStreams: (channelId: string) => Promise<Stream[] | {
	message: string;
}>;
export declare const getShorts: (channelId: string) => Promise<Short[] | {
	message: string;
}>;
export declare const isLive: (channelId: string) => Promise<boolean | {
	message: string;
}>;
export declare const getAll: (channelId: string) => Promise<AllResponse | undefined>;
export interface BasicFormat {
	itag?: number;
	url?: string;
	mimeType?: string;
	bitrate?: number;
	width?: number;
	height?: number;
	lastModified?: string;
	contentLength?: string;
	quality?: string;
	fps?: number;
	qualityLabel?: string;
	projectionType?: string;
	averageBitrate?: number;
	audioQuality?: string;
	approxDurationMs?: string;
	audioSampleRate?: string;
	audioChannels?: number;
}
export interface AdaptiveFormat {
	itag?: number;
	url?: string;
	mimeType?: string;
	bitrate?: number;
	width?: number;
	height?: number;
	initRange?: {
		start: string;
		end: string;
	};
	indexRange?: {
		start: string;
		end: string;
	};
	lastModified?: string;
	contentLength?: string;
	quality?: string;
	fps?: number;
	qualityLabel?: string;
	projectionType?: string;
	averageBitrate?: number;
	colorInfo?: {
		primaries: string;
		transferCharacteristics: string;
		matrixCoefficients: string;
	};
	approxDurationMs?: string;
	highReplication?: boolean;
	audioQuality?: string;
	audioSampleRate?: string;
	audioChannels?: number;
	loudnessDb?: number;
}
export interface Details {
	videoId?: string;
	title?: string;
	lengthSeconds?: string;
	keywords?: string[];
	channelId?: string;
	isOwnerViewing?: boolean;
	shortDescription?: string;
	isCrawlable?: boolean;
	thumbnail?: {
		thumbnails: Thumbnail[];
	};
	allowRatings?: boolean;
	viewCount?: string;
	author?: string;
	isPrivate?: boolean;
	isUnpluggedCorpus?: boolean;
	isLiveContent?: boolean;
}
export interface Info {
	basicFormats: BasicFormat[];
	adaptiveFormats: AdaptiveFormat[];
	details: Details;
}
export declare function isStream(json: any): boolean;
export declare const getInfo: (videoId: string) => Promise<Info | {
	message?: string;
} | undefined>;

export {};
